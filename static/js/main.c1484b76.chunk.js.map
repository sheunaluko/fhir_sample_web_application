{"version":3,"sources":["clock.js","react_extension.js","fhir_request_utilities.js","patient_data_pane.js","PatientSelector.js","App.js","serviceWorker.js","custom.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","react_default","a","createElement","toLocaleTimeString","React","Component","useState","init_state","id","_React$useState","_React$useState2","slicedToArray","value","setter","window","app","set","f","smart","client","base_query","_x","_x2","_base_query","apply","arguments","_callee3","endpoint","opts","url","regenerator_default","wrap","_context3","prev","next","QUERY","get","console","log","request","abrupt","sent","stop","patient_query","_x5","_x6","_patient_query","_callee4","patient","result","_args4","_context4","length","undefined","subject","entry","map","e","resource","make_patient_query","_fn","asyncToGenerator","mark","_callee2","_context2","_x7","_x8","get_patient_medications","get_patient_medications_text","fn","extender","_new_fn","_callee","_context","_x3","_x4","extend_query_fn","med","medicationCodeableConcept","text","get_patient_problems","get_patient_encounters","useStyles","makeStyles","theme","root","padding","overflow","paper","width","progressContainer","pane","fontSize","marginBottom","progress","display","margin","chip","spacing","bold","style","fontWeight","DemographicsPane","classes","content","age","getFullYear","birthDate","get_age","gender","toUpperCase","name","family","given","join","get_name","address","line","city","telecom","className","PatientDataPane","_ReactX$useState7","ReactX","_ReactX$useState8","selectedPatient","Grid","container","item","xs","Paper","elevation","square","Divider","_ReactX$useState","_ReactX$useState2","patientProblems","CircularProgress","data","onsetDateTime","Chip","key","label","code","toLocaleDateString","color","variant","ProblemList","_ReactX$useState3","_ReactX$useState4","patientMedications","MedList","_ReactX$useState5","_ReactX$useState6","patientEncounters","dist","i","title","type","createdAt","period","start","icon","LocalHospital_default","reasonCode","coding","Encounters","paddingTop","paddingLeft","paddingRight","height","flexDirection","marginTop","list","listItem","marginLeft","marginRight","listItemPrimary","listItemSecondary","patient_card","tmp","handlePatientChange","_ref","_fhir","then","x","status","es","sort","b","ListItem","button","onClick","ListItemText","primary","secondary","PatientSelector","patients","List","p","patient_data_pane","fullList","flexGrow","App","open","setOpen","setIt","Drawer","anchor","onClose","index","ListItemIcon","DonutSmall_default","AppBar","position","Toolbar","IconButton","edge","menuButton","aria-label","Menu_default","Typography","clock","src_PatientSelector","Boolean","location","hostname","match","onload","FHIR","serverUrl","fhir_util","flat","pageLimit","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1484b76.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Clock extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { date: new Date() };\n      }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>{this.state.date.toLocaleTimeString()}</p>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from \"react\" ; \n\nif ( ! window.app ) { \n    window.app = {} \n}\n\n// will create ability to globally change state of react hook components \nexport function useState(init_state , id) { \n    // first create the normal hook \n    var [value , setter ] = React.useState(init_state)\n    \n    // then define a new setter function \n    function set(f) { \n        setter( f ( value ) ) \n    }\n\n    window.app[id]  = { value , set }\n\n    return [ value, setter ] \n\n}\n\n\n\n","/* custom library for making fhir requests \n   will assume global SMART client object in namespace   \n   Aug 5, 2019 @Copyright Sheun Aluko  */\n\nimport QUERY from \"url-query-builder\";\n\nlet smart = function() {\n  return window.client;\n};\n\n/* \n  Utility function for defining / extending / composing queries \n  */\n\nexport async function base_query(endpoint, opts) {\n  let url = new QUERY(endpoint, opts).get();\n  console.log(\"[fhir_query]:: \" + url);\n  return await smart().request(url);\n}\n\nfunction extend_query_fn(fn, extender) {\n  async function new_fn(patient, opts) {\n    let result = await fn(patient, opts);\n    if (typeof result == \"object\" && result.length) {\n      //an array\n      return result.map(extender);\n    } else {\n      //not an array\n      return extender(result);\n    }\n  }\n  return new_fn;\n}\n\nexport async function patient_query(patient, endpoint, opts = {}) {\n\n  \n  if (endpoint == \"Encounter\") { \n    opts.subject = \"Patient/\" + patient.id \n  }  else { \n    opts.patient = patient.id;\n  }\n  let result = await base_query(endpoint, opts);\n  if (result.entry ) { \n    return result.entry.map(e => e.resource);\n  } else { \n    return [] \n  }\n}\n\nexport function make_patient_query(endpoint) {\n  async function fn(patient, opts) {\n    return await patient_query(patient, endpoint, opts);\n  }\n  return fn;\n}\n\n/* \n  Begin specific query function definitions \n*/\n\nexport var get_patient_medications = make_patient_query(\"MedicationRequest\");\n\nexport var get_patient_medications_text = extend_query_fn(\n  get_patient_medications,\n  med => med.medicationCodeableConcept.text\n);\n\nexport var get_patient_problems = make_patient_query(\"Condition\");\nexport var get_patient_encounters = make_patient_query(\"Encounter\");\n\n//1278\n","import React from \"react\";\nimport * as ReactX from \"./react_extension\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { Timeline, TimelineEvent , TimelineBlip } from \"react-event-timeline\";\nimport Hospital from \"@material-ui/icons/LocalHospital\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: \"4px\",\n    overflow: \"auto\"\n  },\n  paper: {\n    width: \"100%\"\n  },\n  progressContainer: {},\n\n  pane: {\n    fontSize: \"0.85em\",\n    marginBottom: \"8px\"\n  },\n  progress: {\n    display: \"block\",\n    margin: \"auto\"\n  },\n  chip: {\n    margin: theme.spacing(0.5)\n  }\n}));\n\nfunction get_name(patient) {\n  return patient.name[0].family + \", \" + patient.name[0].given.join(\" \");\n}\n\nfunction get_age(patient) {\n  //note this function is an APPROXIMATION AND DOESNT TAKE INTO ACCOUNT THE MONTH\n  return new Date().getFullYear() - new Date(patient.birthDate).getFullYear();\n}\n\nfunction bold(text) {\n  return <span style={{ fontWeight: \"bold\" }}>{text}</span>;\n}\n\nfunction DemographicsPane(patient, classes) {\n  var content;\n  if (patient == null) {\n    content = <p> Awaiting Patient Selection </p>;\n  } else {\n    let age = get_age(patient);\n    var gender = patient.gender[0].toUpperCase();\n    content = (\n      <div style={{ display: \"flex\" }}>\n        <div style={{ width: \"50%\" }}>\n          <p>\n            {\" \"}\n            {bold(\"Name: \")} {get_name(patient)}\n          </p>\n          <p>\n            {bold(\"Age: \")}\n            {age + \", \"} {bold(\"Gender: \")} {gender}{\" \"}\n          </p>\n          <p>\n            {bold(\"DOB: \")} {patient.birthDate}{\" \"}\n          </p>\n        </div>\n        <div style={{ width: \"50%\" }}>\n          <p>\n            {bold(\"Address: \")} {patient.address[0].line}\n          </p>\n          <p>\n            {bold(\"City: \")}{\" \"}\n            {patient.address[0].city + \", \" + patient.address[0].state}{\" \"}\n          </p>\n          <p>\n            {bold(\"Contact: \")} {patient.telecom[0].value}{\" \"}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.pane}>\n      <h3>Patient Demographics:</h3>\n      {content}\n    </div>\n  );\n}\n\nfunction ProblemList(patient, classes) {\n  const [patientProblems, setPatientProblems] = ReactX.useState(\n    null,\n    \"patientProblems\"\n  );\n\n  var content;\n\n  if (!window.app.selectedPatient.value) {\n    content = <p> Awaiting Patient Selection </p>;\n  } else if (patientProblems === null) {\n    content = <CircularProgress className={classes.progress} />;\n  } else {\n    content = patientProblems.map(data => {\n      let date = new Date(data.onsetDateTime);\n\n      return (\n        <Chip\n          key={data.id}\n          label={data.code.text + \", \" + date.toLocaleDateString()}\n          className={classes.chip}\n          color=\"primary\"\n          variant=\"outlined\"\n        />\n      );\n    });\n  }\n\n  return (\n    <div className={classes.pane}>\n      <h3>Problem List:</h3>\n      {content}\n    </div>\n  );\n}\n\nfunction MedList(patient, classes) {\n  const [patientMedications, setPatientMedications] = ReactX.useState(\n    null,\n    \"patientMedications\"\n  );\n\n  var content;\n\n  if (!window.app.selectedPatient.value) {\n    content = <p> Awaiting Patient Selection </p>;\n  } else if (patientMedications === null) {\n    content = <CircularProgress className={classes.progress} />;\n  } else if (patientMedications.length == 0) {\n    content = [<Chip key=\"none\" label=\"None\" className={classes.chip} variant=\"outlined\" />]\n  } else {\n    content = patientMedications.map(data => {\n      return (\n        <Chip\n          key={data.id}\n          label={data.medicationCodeableConcept.text}\n          className={classes.chip}\n          variant=\"outlined\"\n        />\n      );\n    });\n  }\n\n  return (\n    <div className={classes.pane}>\n      <h3>Active Medications:</h3>\n      {content}\n    </div>\n  );\n}\n\nfunction Encounters(patient, classes) {\n  const [patientEncounters, setPatientEncounters] = ReactX.useState(\n    null,\n    \"patientEncounters\"\n  );\n\n  var content;\n\n  if (!window.app.selectedPatient.value) {\n    content = <p> Awaiting Patient Selection </p>;\n  } else if (patientEncounters === null) {\n    content = <CircularProgress className={classes.progress} />;\n  } else {\n    content = (\n      <Timeline>\n        {patientEncounters.map((data,i) => {\n          return (\n            <TimelineEvent\n              key={i}\n              title={data.type[0].text}\n              createdAt={new Date(data.period.start).toLocaleDateString()}\n              icon={<Hospital />}> \n              { data.reasonCode ? data.reasonCode[0].coding[0].display  : null }\n              </TimelineEvent>\n            \n          );\n        })}\n      </Timeline>\n    );\n  }\n\n  return (\n    <div className={classes.pane}>\n      <h3>Healthcare Encounters:</h3>\n      {content}\n    </div>\n  );\n}\n\nfunction PatientDataPane() {\n  const classes = useStyles();\n  const [selectedPatient, setSelectedPatient] = ReactX.useState(\n    null,\n    \"selectedPatient\"\n  );\n\n  return (\n    <Grid container className={classes.root} spacing={1}>\n      <Grid item xs={12}>\n        <Paper className={classes.paper} elevation={0} square={false}>\n          {DemographicsPane(selectedPatient, classes)}\n        </Paper>\n        <Divider />\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper className={classes.paper} elevation={0} square={false}>\n          {ProblemList(selectedPatient, classes)}\n        </Paper>\n        <Divider />\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper className={classes.paper} elevation={0} square={false}>\n          {MedList(selectedPatient, classes)}\n        </Paper>\n        <Divider />\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper className={classes.paper} elevation={0} square={false}>\n          {Encounters(selectedPatient, classes)}\n        </Paper>\n        <Divider />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default PatientDataPane;\n","import React from \"react\";\nimport * as ReactX from \"./react_extension\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { FixedSizeList } from \"react-window\";\nimport PropTypes from \"prop-types\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport * as _fhir from \"./fhir_request_utilities.js\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport PatientDataPane from \"./patient_data_pane.js\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: \"20px\",\n    paddingLeft: \"10px\",\n    paddingRight: \"5px\"\n  },\n  paper: {\n    height: \"87vh\",\n    padding: \"5px\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  progressContainer: {\n    marginTop: \"30px\"\n  },\n\n  progress: {\n    display: \"block\",\n    margin: \"auto\"\n  },\n  list: {\n    overflow: \"auto\",\n    height: \"90%\"\n  },\n\n  listItem: {\n    width: \"100%\",\n    marginLeft: 0,\n    paddingLeft: 0,\n    paddingRight: 0,\n    marginRight: 0\n  },\n\n  listItemPrimary: {\n    fontSize: \"1.1em\"\n  },\n\n  listItemSecondary: {\n    fontSize: \"0.8em\"\n  }\n}));\n\nlet test_patients = [\n  { name: \"shay\", dob: \"123\" },\n  { name: \"shay\", dob: \"1234\" },\n  { name: \"shay\", dob: \"1235\" },\n  { name: \"shay\", dob: \"1236\" }\n];\n\nlet progressDiv = {\n  display: \"flex\",\n  alignItems: \"center\"\n};\n\nfunction get_name(patient) {\n  return patient.name[0].family + \", \" + patient.name[0].given.join(\" \");\n}\n\nfunction get_age(patient) {\n  //note this function is an APPROXIMATION AND DOESNT TAKE INTO ACCOUNT THE MONTH\n  return new Date().getFullYear() - new Date(patient.birthDate).getFullYear();\n}\n\nfunction patient_card(patient, classes) {\n  let age = get_age(patient);\n  var gender = patient.gender[0].toUpperCase();\n  let tmp = \"Age: \" + age + \", Gender: \" + gender;\n\n  /* \n    This is the most important function; it coordinates all of the \n    state changes that occur when the user selects a new patient \n\n\n  */\n\n  var handlePatientChange = async () => {\n    /* \n      Asynchronously unset all stateful patient data \n    */\n\n    window.app.selectedPatient.set(() => patient);\n    window.app.patientProblems.set(() => null);\n    window.app.patientMedications.set(() => null);\n    window.app.patientEncounters.set(() => null);\n\n    /* \n      Asynchronously set all new stateful patient data  \n    */\n\n    _fhir\n      .get_patient_problems(patient)\n      .then(x => window.app.patientProblems.set(() => x));\n    _fhir\n      .get_patient_medications(patient, { status: \"active\" })\n      .then(x => window.app.patientMedications.set(() => x));\n    _fhir.get_patient_encounters(patient).then(function(es) {\n      es.sort(function(a, b) {\n        if (a.period.start < b.period.start) {\n          return -1;\n        }\n        if (a.period.start > b.period.start) {\n          return 1;\n        }\n        return 0;\n      });\n      window.app.patientEncounters.set(() => es);\n    });\n  };\n\n  return (\n    <ListItem\n      button\n      key={patient.id}\n      className={classes.ListItem}\n      onClick={handlePatientChange}\n    >\n      <ListItemText\n        classes={{\n          primary: classes.listItemPrimary,\n          secondary: classes.listItemSecondary\n        }}\n        primary={get_name(patient)}\n        secondary={tmp}\n      />\n    </ListItem>\n  );\n}\n\nfunction PatientSelector() {\n  const classes = useStyles();\n  const [patients, setPatients] = ReactX.useState([], \"patients\");\n\n  var content;\n\n  if (patients.length == 0) {\n    content = (\n      <div className={classes.progressContainer}>\n        <CircularProgress className={classes.progress} />\n      </div>\n    );\n  } else {\n    content = (\n      <List className={classes.list}>\n        {patients.map(function(p) {\n          return patient_card(p, classes);\n        })}\n      </List>\n    );\n  }\n\n  return (\n    <Grid container className={classes.root} spacing={1}>\n      <Grid item style={{ width: \"20%\" }}>\n        <Paper className={classes.paper} square={false}>\n          <div style={{ marginBottom: \"10px\" }}>Patient Selector</div>\n          <Divider />\n          {content}\n        </Paper>\n      </Grid>\n\n      <Grid item style={{ width: \"80%\" }}>\n        <Paper className={classes.paper}>\n          <div style={{ marginBottom: \"10px\" }}>Patient Data Pane</div>\n          <Divider />\n\n          <PatientDataPane />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default PatientSelector;\n","import React from \"react\";\n//import \"./App.css\";\nimport \"./newapp.css\"\nimport Clock from \"./clock.js\";\nimport Button from \"@material-ui/core/Button\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ListItem } from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Donut from \"@material-ui/icons/DonutSmall\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Toolbar } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport PatientSelector from './PatientSelector.js'\nimport { Container } from '@material-ui/core';\n\n\nconst useStyles = makeStyles({\n  list: {\n    width: 200\n  },\n  fullList: {\n    width: \"auto\"\n  } , \n\n  title : { \n    flexGrow : 1 \n  }\n});\n\n//import ReactGlobe from 'react-globe';\n\nvar divStyle = {\n  padding: \"20px\",\n  margin: \"20px\"\n};\n\nfunction App() {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  window.setIt = setOpen \n\n  function handleDrawerOpen() {\n    setOpen(true);\n  }\n\n  function handleDrawerClose() {\n    setOpen(false);\n  }\n\n  function toggleOpen() { \n    setOpen(!open)\n  }\n\n  return (\n    <div className=\"App\" > \n      <Drawer variant=\"temporary\" anchor=\"left\" open={open} onClose={handleDrawerClose}>\n        <div className={classes.list}>\n          <List>\n            {[\"View\", \"Edit\", \"Analyze\" ].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>\n                  <Donut />\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      </Drawer>\n\n\n      <AppBar position=\"static\">\n        <Toolbar >\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleOpen} >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            FHIR TEST APPLICATION\n          </Typography>\n          <Clock />\n        </Toolbar>\n      </AppBar>\n\n            <div>\n        <PatientSelector></PatientSelector> \n              </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as fhir_util from \"./fhir_request_utilities.js\"\n\nwindow.onload = function() {\n  // FHIR stuff\n  let fhir_url = \"http://test.fhir.org/r4\";\n\n  // Create fhir instance\n  const client = window.FHIR.client({\n    serverUrl: \"https://r4.smarthealthit.org\"\n  });\n\n  window.client = client;\n  console.log(\"Loaded fhir client.\");\n\n  window._fhir = fhir_util \n\n  console.log(\"Loaded FHIR Request Utilities\")\n\n  console.log(\"Requesting patient data from server\")\n  var app = window.app \n\n  client.request(\"Patient\", {flat : true , pageLimit : 1 }).then(function(data) { \n      console.log(\"Setting app patient data...\")\n      data.sort(function(a, b){\n        if(a.name[0].family < b.name[0].family) { return -1; }\n        if(a.name[0].family > b.name[0].family) { return 1; }\n        return 0;\n    })\n    \n    app.patients.set( () => data )\n    //app.selectedPatient.set( () => data[0] )\n\n      window.p = data[0]  // for dev \n  }) \n\n  \n};\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './custom.js'  ; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}